name: Household Location Choice Model

model_type: segmented_discretechoice

segmentation_col: is_inmigrant

choosers_fit_filters: [building_id > 0, for_estimation == 1, previous_building_id <> 0]

choosers_predict_filters: null

alts_fit_filters:
- residential_units > 0

alts_predict_filters:
- vacant_residential_units > 0

interaction_predict_filters: null

choice_column: null

sample_size: 30 # #alternatives in estimation

estimation_sample_size: null # #choosers in estimation

prediction_sample_size: 30 # #alternatives in prediction 


default_config: 
    # inmigrants
    model_expression: I((income>0)*1):I(1*(np.logical_or(mortgage_cost/income < 0.1, mortgage_cost/income > 0.3))) + 
            ln_price_residual_residential + 
            multifamily_generic_type + 
            I(np.where(income>0, (np.log1p(income)/(persons*persons*1.0)*(np.log1p(sqft_per_unit_imputed))), 1)) +
            I((persons < 2)*1):I(np.logical_not(building_type_name == "single_family_residential")*1) +
            I(1*(np.logical_and(persons == 1, age_of_head < 50))):I(1*(np.log1p(employment_retail_wwd)>4)) +
            I((tenure == 1)*1):I(~is_multifamily) + 
            I((persons < 3)*1):I((large_area_id ==6)*1) 
 

                    #avg_network_distance_from_home_to_work(worker1_zone_id, worker2_zone_id, building_zone_id) + 
                    #max_logsum_hbw_am_from_home_to_work_wzone_logsum(worker1_zone_id, worker2_zone_id, building_zone_id, 
                                                                    #income_category, twa_logsum_hbw_1, twa_logsum_hbw_2,
                                                                    #twa_logsum_hbw_3, twa_logsum_hbw_4) 
                    #I((persons < 2)*1):I(np.logical_not(building_type_name == "single_family_residential")*1) + 
                    #I((persons > 3)*1):I(np.logical_not(large_area_id == 6)*1) + 
                    #I((tenure == 1)*1):I(~is_multifamily) +
                    #I((persons-2)*(persons > 2)):I((building_type_name == "condo_residential")*1) + 
                    #I(np.log1p(income)/(persons*persons*1.0)):I(np.log1p(sqft_per_unit)) + 
                    #I(1*np.logical_or(mortgage_cost/income < 0.1, mortgage_cost/income > 0.3)) + 
                    #ln_price_residual + 
                    #I((employment_density_wwd > 25) * np.log1p(employment_density_wwd)) + 
                    #I(1*(np.logical_and(persons == 1, age_of_head < 50))):I(1*(np.log1p(employment_retail_wwd)>4)) + 
                    
                    # The two variables below need to be modified when households for estimation are ready.
                    # They take values from current locations instead of previous locations
                    #equals(is_residence_mf, multifamily_generic_type) +
                    #equals(residence_large_area, large_area_id)

models:
    residents:
        model_expression: multifamily_generic_type + 
                    avg_network_distance_from_home_to_work(worker1_zone_id, worker2_zone_id, building_zone_id) + 
                    max_logsum_hbw_am_from_home_to_work_wzone_logsum(worker1_zone_id, worker2_zone_id, building_zone_id, 
                                                                    income_category, twa_logsum_hbw_1, twa_logsum_hbw_2,
                                                                    twa_logsum_hbw_3, twa_logsum_hbw_4) +
                    I(1*np.logical_and(multifamily_generic_type, prev_residence_is_mf)) +                                                  
                    I((persons < 2)*1):I(np.logical_not(building_type_name == "single_family_residential")*1) + 
                    I((persons > 3)*1):I(np.logical_not(large_area_id == 6)*1) +
                    I(1*(prev_residence_large_area_id == large_area_id)) +
                    I((tenure == 1)*1):I(~is_multifamily) +
                    ln_price_residual_residential +  
                    I(1*(np.logical_and(persons == 1, age_of_head < 50))):I(1*(np.log1p(employment_retail_wwd)>4)) +
                    I(np.where(income>0, (np.log1p(income)/(persons*persons*1.0)*(np.log1p(sqft_per_unit_imputed))), 1)) +
                    I((income>0)*1):I(1*(np.logical_or(mortgage_cost/income < 0.1, mortgage_cost/income > 0.3))) 
        
                    #I(1*(mortgage_cost/income < 0.1)) +
                    #I(1*(mortgage_cost/income > 0.3))


                    #housing_range = numpy.logical_or(((((0.06/12)*(unit_price*sqft_per_unit+(sqft_per_unit/pbsqft)*parcel_land_value)*(1+0.06/12)**360)/(((1+0.06/12)**360)-1)*12)/income) < .1, (((((0.06/12)*(unit_price*sqft_per_unit+(sqft_per_unit/pbsqft)*parcel_land_value)*(1+0.06/12)**360)/(((1+0.06/12)**360)-1)*12)/income)>.3))

                    #I(1*np.logical_or(mortgage_cost/income < 0.1, mortgage_cost/income > 0.3)) + 
                    #I((income>0)*1):I(np.log1p(income)/(persons*persons*1.0))*(np.log1p(sqft_per_unit))  
                    
                    #I((employment_density_wwd > 25) * np.log1p(employment_density_wwd)) 
                    #I(np.log1p(income)/(persons*persons*1.0)):I(np.log1p(sqft_per_unit))  
                    # The two variables below need to be modified when households for estimation are ready.
                    # They take values from current locations instead of previous locations
                    #equals(is_residence_mf, multifamily_generic_type) +
                    #equals(residence_large_area, large_area_id)
            
        name: 0

fitted: false

choice_mode: individual

remove_alts: true

probability_mode: full_product